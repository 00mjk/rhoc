# see more about used linters https://github.com/golangci/golangci-lint#supported-linters
# options for analysis running
run:

  # timeout for analysis, e.g. 30s, 5m
  timeout: 5m

  # exit code when at least one issue was found
  issues-exit-code: 1


# specific linters settings
linters-settings:
  errcheck:
    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: true

    # settings per analyzer
    settings:
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

  golint:
    # minimal confidence for issues
    min-confidence: 0.8

  gofmt:
    # simplify code: gofmt with `-s` option
    simplify: true

  dupl:
    # tokens count to trigger issue
    threshold: 100

  goconst:
    # minimal length of string constant
    min-len: 3
    # minimal occurrences count to trigger
    min-occurrences: 3

  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns
    max-func-lines: 30

  dogsled:
    # checks assignments with too many blank identifiers; default is 2
    max-blank-identifiers: 2

linters:
  enable:
    # Vet examines Go source code and reports suspicious constructs,
    # such as Printf calls whose arguments do not align with the format string
    - govet
    # Errcheck is a program for checking for unchecked errors in go programs
    - errcheck
    # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - staticcheck
    # Checks Go code for unused constants, variables, functions and types
    - unused
    # Linter for Go source code that specializes in simplifying a code
    - gosimple
    # Finds unused struct fields
    - structcheck
    # Finds unused global variables and constants
    - varcheck
    # Detects when assignments to existing variables are not used
    - ineffassign
    # Finds unused code
    - deadcode
    # Like the front-end of a Go compiler, parses and type-checks Go code
    - typecheck
    # Detect style mistakes
    - golint
    # Linter that suggests narrower interface types
    - interfacer
    # Remove unnecessary type conversions
    - unconvert
    # Tool for code clone detection
    - dupl
    # Finds repeated strings that could be replaced by a constant
    - goconst
    # Gofmt checks whether code was gofmt-ed
    - gofmt
    # Goimports does everything that gofmt does. Additionally it checks unused imports
    - goimports
    # Reports unused function parameters
    - unparam
    # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    - dogsled
    # Finds naked returns in functions greater than a specified function length
    - nakedret
    # Finds slice declarations that could potentially be preallocated
    - prealloc
    # Scopelint checks for unpinned variables in go programs
    - scopelint
    # The most opinionated Go source code linter
    - gocritic

  # optional linters are used by another config
  disable:
    - gosec
    - gocyclo
    - gocognit
    - maligned
    - depguard
    - misspell
    - lll
    - gochecknoinits
    - gochecknoglobals
    - godox
    - funlen
    - whitespace
    - wsl
  presets:
    - bugs
    - unused


issues:
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:

    # Exclude some staticcheck messages
    - linters:
        - unparam
      text: "always"

  # Maximum issues count per one linter. Set to 0 to disable.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable.
  max-same-issues: 0

  # Show only new issues
  new: false